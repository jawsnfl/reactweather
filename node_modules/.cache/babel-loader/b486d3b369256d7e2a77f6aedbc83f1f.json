{"ast":null,"code":"var _jsxFileName = \"/home/jawscorp/Projects/react/weather-finder/src/App.js\";\nimport React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nconst API_KEY = \"169332d4eecdaeee4300e2cf459ecdc2\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      forecast: undefined,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&APPID=\").concat(API_KEY, \"&units=metric\"));\n      const api_forecast = await fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&APPID=\").concat(API_KEY, \"&units=metric\"));\n\n      if (city && country) {\n        const data = await api_call.json();\n        const forecast = await api_forecast.json();\n        this.setState({\n          temperature: parseInt(data.main.temp) + \"Celcius\",\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity + \"%\",\n          description: data.weather[0].description,\n          forecast: forecast.list,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          forecast: undefined,\n          error: \"please enter values.\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-5 title-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Titles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-xs-7 form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      getWeather: this.state.temperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      temperature: this.state.temperature,\n      city: this.state.city,\n      country: this.state.country,\n      humidity: this.state.humidity,\n      description: this.state.description,\n      forecast: this.state.forecast,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/jawscorp/Projects/react/weather-finder/src/App.js"],"names":["React","Titles","Form","Weather","API_KEY","App","Component","state","temperature","undefined","city","country","humidity","description","forecast","error","getWeather","e","preventDefault","target","elements","value","api_call","fetch","api_forecast","data","json","setState","parseInt","main","temp","name","sys","weather","list","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Titles from \"./components/Titles\"\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\n\nconst API_KEY = \"169332d4eecdaeee4300e2cf459ecdc2\";\nclass App extends React.Component{\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    forecast: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`\n    );\n    const api_forecast = await fetch(\n      `http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=${API_KEY}&units=metric`\n    );\n\n\n    if(city && country){\n      const data = await api_call.json();\n      const forecast = await api_forecast.json();\n\n      this.setState({\n        temperature: parseInt(data.main.temp)  + \"Celcius\",\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity + \"%\",\n        description: data.weather[0].description,\n        forecast: forecast.list,\n        error: \"\"\n      });\n    }else{\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        forecast: undefined,\n        error: \"please enter values.\"\n      });\n    }\n  }\n\n  render(){\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles/>\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <form getWeather={this.state.temperature}/>\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    forecast={this.state.forecast}\n                    error={this.state.error}\n                  />                \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}